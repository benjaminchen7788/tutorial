


1. 設定你的帳戶，讓 Git 知道這台電腦做的修改要連結到哪一個使用者
$ git config --global user.name "<Your Name>"

2. 設定電子郵件：
$ git config --global user.email "<your@gmail.com>"

3. 建立一個 hello-git 資料夾
$ mkdir hello-git

4. 移動到 hello-git 資料夾
$ cd hello-git

5. 將專案資料夾建立成 git repository
$ git init

6. 列出專案資料夾下的檔案和資料夾（-l 參數為列出詳細資料，-a 為列出隱藏資料夾）
$ ls -la

7. 新增任意資料後（例如： $ vi test.txt）並檢查狀態
$ git status

8. 將檔案加入追蹤（檔案有修改就能追蹤到）並檢視狀態
$ git add test.txt
$ git status

9. 若是確認沒問題我們就準備 commit 進去 repository 
$ git commit -m "test.txt"

10. commmit 完成
$ git status
On branch master
nothing to commit, working tree clean

11. 把電腦裡 Local（本地端）的 repository（檔案庫）和 remote（遠端）的 repository（檔案庫）連結起來，並 push 電腦上的修改
$ git remote add origin <remote 網址>

12. 將本地端程式 push 到遠端檔案庫
$ git push -u origin master

$ git push origin master
$ git checkout master
$ git branch -u origin/master

13. 複製到本地端 : $ git clone <網址>
$ git clone https://github.com/happycodergit/react.git

14. 複製到本地端
$ git clone https://github.com/happycodergit/react.git
移動到 react 資料夾
$ cd react
切出自己的新分支（使用 -b）
$ git checkout -b happycoder@feature_branch
做一些 README.md 檔案修改，然後 commit 到自己 fork 過來的專案
$ git commit -a -m "Update README"
$ git push origin happycoder@feature_branch



回來原來的 git-example 專案新增 feature branch（分支）
建立一個名為 dev 的 branch
$ git checkout -b dev

在 hello.py 最上面多加一行 # hi, this is comment 註解後存檔
commit 到本地端更新
$ git commit -a -m "Init dev branch"
$ gut push origin dev


請其他開發者 git colone 下來你的 git-example 專案並 checkout 到 dev branch，並完成新增一個 README.md 檔案後發 pull request 過來，若沒問題就按同意並合併。我們則透過 git pull 來保持本地端和遠端程式碼同步：
$ git pull origin dev

Merge（合併）和刪除 branches
在本機上 merge 合併你的 branch（分支），刪除舊的 branch（分支）
移動到 master branch
$ git checout master
合併 dev 到 master
$ git merge dev
刪除 dev branch
$ git branch -d dev
將合併後的 master 推送到遠端
$ git push origin master
註: 刪除遠端的分支
$ git push origin :cat


15. 刪除 git 上的事物
$ git rm <物件>   EX: $ git rm welcome.html
接著再 $ git commit -m <物件>, $ git push -u origin master 
即可刪除本地＆ git 上的物件
註: 先轉換成自己要的分支 $ git checkout <分支名稱>   EX: $ git checkout master



